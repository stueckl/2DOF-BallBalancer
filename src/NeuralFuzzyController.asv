classdef NeuralFuzzyController < handle
    %NEURALFUZZYCONTROLLER Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        matAngValX
        matAngValY
        fuzzyLogic
        fuzzyStates
        fuzzyStatesPerVariable
        fuzzyComperator
        percentages
    end
    
    methods
        function obj = NeuralFuzzyController()
            %first layer of logic
            obj.fuzzyLogic = Fuzzy();
            obj.fuzzyStates = obj.fuzzyLogic.createStates();
            
            %second layer of logic 
            %add a create a matrix  for each state and variable
            %Matrixes are build ['posHorz',  'velHorz', 'velVert']
            obj.fuzzyStatesPerVariable = transpose(obj.fuzzyLogic.GetNumStatesPerVariable());                      
            obj.matAngValX = zeros([obj.fuzzyStatesPerVariable(1) obj.fuzzyStatesPerVariable(3)]);
            obj.matAngValY = zeros([obj.fuzzyStatesPerVariable(2) obj.fuzzyStatesPerVariable(4)]);
            %load nets based on States names from subfolders
            
            %third layer of logic
            
            
        end %NeuralFuzzyController()
        
        function angVal = Calculate(obj, ballPos, ballVel)
            %first layer calculation
            transBallPos = transpose(ballPos);
            transBallVel = transpose(ballVel);
            obj.percentages = obj.fuzzyLogic.calculate(transBallPos, transBallVel);
            disp(obj.percentages);
            
            %second layer calculation
            i = 1;
            s = length(obj.percentages);
            
            for j = 1:s(1)
               
                if obj.percentages(i) ~= 0
                   disp(obj.matAngValX());
                   disp(obj.matAngValY());
                end
               i = i + 1;
            end
            disp('new loop')
            %third layer comparison
            angVal = [500, 500];
            
        end % Calculate()
    end
    
end

